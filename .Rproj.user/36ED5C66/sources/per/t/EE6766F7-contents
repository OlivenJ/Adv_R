---
title: "Section 4 & 5"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lobstr)
```
# Subsetting

The atomic vectors' subset is skipeed here, since most of the techniques are very well known.

```{r}
a <- matrix(1:9, nrow = 3)
colnames(a) <- c("A", "B", "C")

a[1:2,]
a[c(TRUE, TRUE, FALSE), c("B", "A")]
a[0,-2]
```
The matrix, as we discussed before, is the combination of list.
And since matrix is 2d, we have to specify the row and columns which we want to subset.


Data frame enjoy similar, almost same feature as matrix, you can subset the data frame using bascially the same method as you subset the matrix.
```{r}
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])

df[df$x  == 2,] #Notice, first we have df$x ==2 will return a series of logic values, then we 
                #use those logic values to subset the columns of the data frame there fore we will 
                # have the second column returns, only the second vlaues on the logic chian is TRUE

df[c(1,3),] # Here, since we use the comma, we are subsetting the column, so we are subset the first
            #and the third columns

# There are two ways that you can subset the columns:
df[c("x","z" )] # Since the character only exist on the column, the subset will locate to the corresponding area
df[,c("x", "z")] # This is more clear
```

```{r}
a <- matrix(1:4, nrow = 2)
str(a[1,])
```
One important thing need to notice is that, when subsetting the matrix , and data frame (since they are actually base on the same logic foundation) the subsetting will drop the dimensionality when it can, by default.
```{r}
str(df["x"]) #The result is a data frame
str(df[,"x"]) #The result is one dimension vector
```
When writing function, this feature will in lot's of time cause bug and trouble, so the way to prevent it is to change the setting:

```{r}
str(df[,"x"]) #go with the default, the dimension droped
str(df[,"x", drop = FALSE]) # change the drop = FALSE, we keep the data frame and the dimensions
```

Luckly, when using tibble, Hadley design it to keep the dimensions. So the subset from a tibble is always a tibble.

## Selecting a single element: [[]] and $
Using [[]] gives you access to single variables and values:
[] on a list will alwyas return you another list, and [[]] will give, most of the time, what you want.
```{r}
x <- list(1:3, "a", 4:6)
typeof(x[1]) # the type is list
typeof(x[[1]]) # the type is integer
```

\$ is a shorthand notion of [["variable_name"]], especially when you are playing with data frame or tibble, \$ goew very handy.

But you may (at leas I am) encounter situation like below
```{r}
var <- "cyl"
mtcars$var # It does not return what you expect....

#So use instead
mtcars[[var]]
```

# Control Flow

## Condition flow: if and switch

The condition of the if statment can be single logic expression:
```{r}
greet <-function(name, birthday = FALSE){
  paste0(
    "Hi ", name,
    if(birthday) " and HAPPY BIRTHDAY"
  )
}
greet("Maria", FALSE)
greet("Jamine", TRUE)
```
Notice, if statment can only handle one logic value at one time, so if you pass multiple logic vlaues to the flow, it will return you a error.

If you do want have a vector of logic value, use `ifelse()`, the vectorised function.
```{r}
x <- 1:10
ifelse(x%%5 == 0, "XXX", as.character(x))
ifelse(x%%2 == 0, "even", "odd")
```
Hadley here suggest that use `ifelse()`return the results of yes and no answers are the same types, otherwise the result will be hard to predict.

There is another type of vectorised function `dplyr::case_when()` and the syntax is quite different.
```{r}
dplyr::case_when(
  x%%35 == 0 ~ "fizz buzz",
  x%%5 == 0~ "fizz",
  x%%7 == 0 ~ "buzz",
  is.na(x) ~ "???",
  TRUE ~ as.character(x)
)
# I really can not easily understand the syntax here
```

A less common condiditon control flow is the `switch()`, at least for me, I heared about it before, but never really used it.

It help us to make the code more concise:
```{r}
x_option <- function(x) {
  if (x == "a") {
    "option 1"
  } else if (x == "b") {
    "option 2" 
  } else if (x == "c") {
    "option 3"
  } else {
    stop("Invalid `x` value")
  }
}

# Can be write with switch() as

x_option <- function(x) {
  switch(x,
    a = "option 1",
    b = "option 2",
    c = "option 3",
    stop("Invalid `x` value")
  )
}
```
You should always end the `switch()` with a line to hanle error, otherwise the statement will just deliver NULL

If you have several condition share one same output, just left the = empty, the result will fall into the next condition.
```{r}
legs <- function(x) {
  switch(x,
    cow = ,
    horse = ,
    dog = 4,
    human = ,
    chicken = 2,
    plant = 0,
    stop("Unknown input")
  )
}
legs("cow")

legs("dog")

```

Hadley here suggest only use `switch()` when you handling character, numeric value may return with bizzar result.

## Loop flow: for and when

There are some pitfalls you need to pay attention to when using for loop:

1. Predetermine the container before call the loop. When using the for loop, if you append the value one after one rather than store them into the pre-make container, the loop will be extremely slow. This is because everytime you append the value, R will re-generate the whole container again and again, which will eat up tons of memory. 

2. If you want to use `1:length(x)` to generate the sequence of number for for loop, be aware sometimes the length funciton will return a zero value.
To prevent this, use `seq_along()`. It is a more robust option

3. This problem comes with the S3 vector (date, date-times etc.), the for loop will strip the `class` attributes and return you plain numer. 
Rather, you need `[[]]` to help:
```{r}
xs <- as.Date(c("2020-01-01", "2020-02-01"))

for(x in xs){
  print(x)
} # it return two integer, as we know the date is build up on number

for(i in seq_along(xs)){
  print(xs[[i]])
} ## with [[]] you can see we return with date

```

As `for` has this and that problems, you can always use `while` and `repeat` to replace the `for`.

When doing data analysis task, use `map()` or even `apply family` will be more appropriate, and efficient.