df <- data.frame(runif(3), runif(3))
df
df$runif.3. + df$runif.3..1
df$3 <- df$runif.3. + df$runif.3..1
df$"3" <- df$runif.3. + df$runif.3..1
df
x <- runif(1e6)
x
y <- list(x, x, x)
y
a <- c(1, 5, 3, 2)
b <- a
b[[1]] <- 10
a <- c(1, 5, 3, 2)
a
b <- a
b
a
b[[1]] <- 10
b
a
library(lobstr)
install.packages("lobstr")
library(lobstr)
a <- c(1, 5, 3, 2)
b <- a
b[[1]] <- 10
b
a
x <- c(1,2,3)
y <- x
x
y
obj_addr(x)
obj_addr(y)
obj_addr(x)
obj_addr(y)
obj_addr(a)
obj_addr(b)
a <- c(1, 5, 3, 2)
b <- a
obj_addr(a)
obj_addr(b)
b[[1]] <- 10
obj_addr(b)
`if` <- 1
if
end
`if`
mean
base::mean
get("mean")
evalq(mean)
?evalq
match.fun("mean")
obj_add(evalq(mean))
obj_addr(evalq(mean))
obj_addr(obj_addmean)
obj_addr(match.fun("mean"))
obj_addr(evalq(mean))
obj_addr(get("mean"))
obj_addr(base::mean)
obj_addr(mean)
?read.csv
?make.names
123e1
x <- c(1, 2, 3)
y <- x
y[[3]] <- 4
y
x
x <- c(1, 2, 3)
tracemem(x)
cat(tracemem(x), "\n")
y <- x
y[[3]] <- 4
x
y[[3]] <- 5L
y
untracemem()
untracemem(x)
f <- function(a) {
a
}
x <- c(1, 2, 3)
cat(tracemem(x), "\n")
z
z <- f(x)
f <- function(a) {
a
}
x <- c(1, 2, 3)
cat(tracemem(x), "\n")
z <- f(x)
untracemem(x)
x <- list(1:10)
x
x[[2]] <- x
x
x
x
x
x[[2]] <- x
x[[2]] <- x
x[[2]] <- x
x[[2]] <- x
x[[2]] <- x
x
x <- runif(1e6)
obj_size(x)
y <- list(x,x,x)
obj_size(y)
obj_size(list(NULL,NULL,NULL))
obj_size(x) + obj_size(y)
obj_size(x, y)
?object.size()
?obj_size()
obj_size(list(mean, sd, var))
obj_size(mean) + obj_size(sd) + obj_size(var)
a <- runif(1e6)
obj_size(a)
b <- list(a, a)
obj_size(b)
obj_size(a, b)
b[[1]][[1]] <- 10
b
b
obj_size(b)
b <- list(a, a)
obj_size(b)
b[[1]][[1]] <- 10
obj_size(b)
obj_size(a, b)
b[[2]][[1]] <- 10
obj_size(b)
install.packages("reticulate")
Y
Y
n
ï¼Ÿis.vector()
?is.vector()
c("1", 1)
?raw
c(1, 0)
c(1, FALSE)
c('a', 1)
c(TRUE, 1L)
1 == "1"
a <- 1:3
a <- 1:3
attr(a, "x") <- "abcdef"
attr(a, "x")
?attr
a
attr(a, "y") <- 4:6
str(attributes(a))
a
x <- c(a = 1, b = 2, c = 3)
x
names(x ) <- c("a", "b", "c")
x <- 1:3
names(x ) <- c("a", "b", "c")
x <- 1:3
x
names(x ) <- c("a", "b", "c")
x
x <- setNames(1:3, c("a", "b", "c"))
x
x <- matrix(1:6, nrow= 2, ncol = 3)
x
y <- array(1:12, c(2,3,4))
y
y <- array(1:12, c(2,3,2))
y
z<-1:6
z
dim(z) <- c(3,2)
z
x <- factor(c("a", "b", "b", "a"))
s
x
atributes(x)
attributes(x)
today <- Sys.Date()
today
attributes(today)
typeof(today)
date <- as.Date("1970-02-01")
unclass(date)
now_ct <- as.POSIXct("2020-08-01 22:00", tz = "UTC")
typeof(now_ct)
attributes(now_ct)
library(lobstr)
l1 <- list(
1:3,
"a",
c(TRUE, FALSE, TRUE),
c(2.3, 5.9)
)
typeof(l1)
str(l1)
a <- list(1, 'a', FALSE, "what", 1.34)
a
typeof(a)
unlist(a)
typeof(a)
a <- unlist(a)
typeof(a)
df1 <- data.frame(x = 1:3, y = letters[1:3])
typeof(df1)
attributes(df1)
library(lobstr)
library(lobstr)
library(tidyverse)
x <- c(2.1, 4.2, 3.3, 5.4)
x[c(1,2)]
x[c(2,3)]
order(x)
x[order(x)]
letters
letters[1:4]
y <- setNames(x, letter[1:4])
y <- setNames(x, letters[1:4])
y
y[c("a", "b")]
a <- matrix(1:9, nrow = 3)
colnames(a) <- c("A", "B", "C")
a
a[1:2,]
a[1:2,3]
a[c(TRUE, TRUE, FALSE), c("B", "A")]
a[0,-2]
a <- matrix(1:9, nrow = 3)
colnames(a) <- c("A", "B", "C")
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df
df$x
df$x  = 2
df$x  = 2
df
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df$x  == 2
df[df$x  == 2]
df[df$x  == 2,]
df[,"x"]
df["x"]
df[,"x"]
a <- matrix(1:4, nrow = 2)
str(a[1,])
a
df[c(1,3),]
df[df$x  == 2,]
df[df$x  == 2,]
df$x  == 2
df[df$x  == 2,]
#use those logic values to subset the columns of the data frame there fore we will
df[c(1,3),]
str(df["x"])
str(df[,"x"])
str(df["x"]) #The result is one dimension vector
str(df[,"x"]) #The result is one dimension vector
str(df[,"x"])
str(df[,"x", drop = FALSE])
mtcars[mtcars$cyl = 4, ]
mtcars[mtcars$cyl == 4, ]
mtcars[-1:4, ]
mtcars[-(1:4), ]
mtcars[mtcars$cyl <= 5]
mtcars$cyl
mtcars$cyl <= 5
mtcars[mtcars$cyl <= 5,]
mtcars$cyl == 4 | 6
mtcars[mtcars$cyl == 4 | 6 ]
mtcars[mtcars$cyl == 4 | 6, ]
mtcars$cyl == 4 | 6
mtcars$cyl == 4 | mtcars$cyl == 6
mtcars[mtcars$cyl == 4 | mtcars$cyl == 6, ]
outer(1:5, 1:5, FUN = "*")
upper.tri(x)
?upper.tri
x[upper.tri(x)]
upper.tri(x, diag = TRUE)
x[upper.tri(x),]
mtcars[1:20]
1:20
mtcars
dim(mtcars)
mtcars[1:20,]
mtcars[1:2]
mtcars[1:3]
mtcars[1:4]
mtcars[1:11]
mtcars[1:12]
x <- list(1:3, "a", 4:6)
x
typeof(x)
typeof(x[1])
typeof(x[[1]])
x[[1]]
x[1]
typeof(x[[1]]) # the type is integer
mtcars$var
#So use instead
mtcars[[var]]
#So use instead
mtcars[[var]]
var <- 'cyl'
var <- "cyl"
mtcars$var # It does not return what you expect....
#So use instead
mtcars[[var]]
greet <-function(name, birthday = FALSE){
paste0(
"Hi ", name,
if(birthday) "and HAPPY BIRTHDAY"
)
}
greet("Maria", FALSE)
greet("Jamine", TRUE)
ifelse(x%%5 == 0, "XXX", as.character(x))
x <- 1:10
ifelse(x%%5 == 0, "XXX", as.character(x))
ifelse(x%%2 == 0, "even", "odd")
dplyr::case_when(
x%%35 == 0 ~ "fizz buzz",
x%%5 == 0~ "fizz",
x%%7 == 0 ~ "buzz",
is.na(x) ~ "???"
TRUE ~ as.character(x)
dplyr::case_when(
x%%35 == 0 ~ "fizz buzz",
x%%5 == 0~ "fizz",
x%%7 == 0 ~ "buzz",
is.na(x) ~ "???",
TRUE ~ as.character(x)
)
print(x)
xs <- as.Date("2020-01-01", "2020-02-01")
for(x in xs){
print(x)
}
xs <- as.Date("2020-01-01", "2020-02-01")
for(x in xs){
print(x)
}
for(i in seq_along(xs)){
print(x[[i]])
}
print(xs[[i]])
for(i in seq_along(xs)){
print(xs[[i]])
}
xs <- as.Date("2020-01-01", "2020-02-01")
xs
xs <- as.Date(c("2020-01-01", "2020-02-01"))
xs
for(x in xs){
print(x)
}
for(x in xs){
print(x)
} # it return two integer, as we know the date is build up on number
for(i in seq_along(xs)){
print(xs[[i]])
}
